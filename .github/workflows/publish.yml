name: Publish to Crates.io

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Run without publishing (dry run)"
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            rust: nightly
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --all-features --verbose

      - name: Run doc tests
        run: cargo test --doc --all-features --verbose

      - name: Check formatting
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
        run: |
          rustup component add rustfmt
          cargo fmt -- --check

      - name: Run clippy
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
        run: |
          rustup component add clippy
          cargo clippy --all-features -- -D warnings

  publish:
    name: Publish to Crates.io
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Verify crate metadata
        run: |
          echo "Checking crate metadata..."
          cargo metadata --format-version=1 --no-deps | jq -r '.packages[0] | {name, version, authors, license, repository, description}'

      - name: Check if version exists on crates.io
        id: check_version
        run: |
          CRATE_NAME=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].name')
          CRATE_VERSION=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].version')

          echo "Checking if $CRATE_NAME v$CRATE_VERSION already exists on crates.io..."

          if curl -s "https://crates.io/api/v1/crates/$CRATE_NAME/$CRATE_VERSION" | jq -e '.version' > /dev/null 2>&1; then
            echo "Version $CRATE_VERSION already exists on crates.io"
            echo "version_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Version $CRATE_VERSION does not exist on crates.io"
            echo "version_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build crate
        run: cargo build --release --all-features

      - name: Package crate
        run: cargo package --all-features --allow-dirty

      - name: Dry run publish
        if: inputs.dry_run == 'true' || steps.check_version.outputs.version_exists == 'true'
        run: |
          echo "Running in dry-run mode..."
          cargo publish --dry-run --all-features

      - name: Publish to crates.io
        if: inputs.dry_run != 'true' && steps.check_version.outputs.version_exists == 'false'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          echo "Publishing to crates.io..."
          cargo publish --all-features --token $CARGO_REGISTRY_TOKEN
          echo "Successfully published to crates.io! 🎉"

      - name: Create GitHub Release Notes
        if: inputs.dry_run != 'true' && steps.check_version.outputs.version_exists == 'false'
        run: |
          CRATE_NAME=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].name')
          CRATE_VERSION=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[0].version')

          echo "📦 Published $CRATE_NAME v$CRATE_VERSION to [crates.io](https://crates.io/crates/$CRATE_NAME/$CRATE_VERSION)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Install with:" >> $GITHUB_STEP_SUMMARY
          echo '```toml' >> $GITHUB_STEP_SUMMARY
          echo "$CRATE_NAME = \"$CRATE_VERSION\"" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  notify-failure:
    name: Notify on Failure
    needs: [test, publish]
    if: failure()
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Notify failure
        run: |
          echo "❌ Failed to publish to crates.io" >> $GITHUB_STEP_SUMMARY
          echo "Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
